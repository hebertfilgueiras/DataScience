x<- 20:30
x
x[3]
x[> 27]
x[> 27]
x[X> 27]
x[x> 27]
x+1
plot(x)
plot(x²)
plot(x^2)
plot(log(x))
plot(x^10)
x<- c(2,4,7,9)
mean (x)
median(x)
sum(x)
sd(x)
boxplot(x)
boxplot(x)
boxplot(x)
help(mea)
help(mean)
mean (TRUE)
exemple(mean)
example(mean)
x <- c(0:10, 50)
x <- c(0:10, 50)
x
dados1<- read.csv("/home/hebert/CursoR/8ManipulandoDados/importandocsv/dados1.csv")
dados1
View(dados1) #visualiza a tabela
head(dados1)# mostra as primeiras linhas de cada coluna
names(dados1) # mostra os nomes das colunas
str(dados1) # mostra a estrutura do data frame
dados1[,3] # acessa a terceira coluna
altos<- dados1[dados1$altura>1.6,]
View(altos)
altinho<- dados1[dados1$altura>1.6]
dados1$altur#acessa a coluna "altura"
dados1$altura#acessa a coluna "altura"
View(altos)
sono<- sleep
View(sono)
sono
#exercicios 1
help(sleep)
sono<- sleep
sono
source('~/.active-rstudio-document')
View(sono1)
#media de cada df
mean(sono)
#media de cada df
mean(sono)
sono
#media de cada df
mean(sono1)
#media de cada df
mean(sono1$extra)
#media de cada df
mean(sono$extra)
mean(sono2$extra)
#median
mean(sono$extra)
#median
mean(sono$extra)
mean(sono$group==1,sono$extra,)
mean(sono[sono$group==1],sono$extra,)
sono[sono$group==1]
sono$group==1
(sono$group==1,)
[sono$group==1,]
sono[sono$group==1,]
(sono[sono$group==1,],sono$extra)
sono[sono$group==1,]
sono[sono$group==1,sono$extra]
sono[sono$group==1,1]
mean(sono[sono$group==1,1])
sono[sono$group==1,sono$group]
boxplot(sono1$extra)
dados2<- data.frame("col1"=1:5,"col2"=c(10,20,30,40,50))
daodos2
dados2
apply(dados2, 2, sum)
apply(dados2, 1, sum)
apply(dados2, 1, mean)
dados3<- data.frame("col1"=1:5,"col2"=c(10,20,30,40,50),"col3"=c("a","a","b","b","a"))
apply(dados2$col1, 2, sum)
tapply(dados3$col1,dados3$col3,mean)
dados3
grafico = c(3,4,2,2,1)
plot(grafico)
plot(grafico,type=1)
plot(grafico,type="1")
plot(grafico)
plot(grafico,type = 1)
plot(grafico,type = '1')
help(plot)
plot(grafico,type = 'l')
plot(grafico,type = 'o')
hist(grafico)
barplot(grafico)
data()
data()
AirPassengers
str(AirPassengers)
frango <-chickwts
str(frango)
View(frango)
data()
frango <-ChickWeight
str(frango)
View(sono)
View(sono)
View(frango)
hist(frango)
hist(frango$weight)
table(frango$Diet)
tapply(frango$weight,frango$Diet,mean)
laranja <-Orange
str(laranja)
laranja
table(laranja)
hist(laranja)
hist(laranja$age)
str(laranja)
plot(laranja$age,laranja$circumference)
help(boxplot)
boxplot(laranja$Tree)
laranja
tapply(laranja$circumference, laranja$Tree, mean)
boxplot(tapply(laranja$circumference, laranja$Tree, mean))
mean(laranja$circumference)
table(laranja$Tree)
table(laranja$age)
table(laranja)
table(laranja$age)
laranja
table(laranja$Tree)
table(laranja$age)
table(laranja$Tree)
plot(laranja$Tree,laranja$circumference)
boxplot(tapply(laranja$circumference, laranja$Tree, mean))
plot(laranja$Tree,laranja$circumference)
setwd("/home/hebert/Documentos/DataScience/ReMSAzureMachine/RFundamentos/Patre2")
getwd()
?aes
?aes
??aes
??ggplot
?ggplot
?ggplot2
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
?ggplot2
?aes
vec1 = c('Macho','Femea','Macho','Femea','Macho')
vec1
fac_vec1 = factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
grad = c("Mestrado",'Doutorado','Bacharelado','Mestrado','Mestrado')
fac_grad = fatcor(grad,order=T,levels=c('Doutorado','Mestrado','Bacharelado'))
fac_grad = fatcor(grad,order=TRUE,levels=c('Doutorado','Mestrado','Bacharelado'))
fac_grad = factor(grad,order=TRUE,levels=c('Doutorado','Mestrado','Bacharelado'))
fac_grad
levels(fac_grad)
sumary(fac_grad)
summary(fac_grad)
vec2 = c('M','F','M','F','M','F','M','F')
fac_vec2 = factor(vec2)
levels(fac_vec2)
levels(fac_vec2)= c("Femenino","Masculino")
levels(fac_vec2)
sumary(fac_vec2)
summary(fac_vec2)
data = c(1,2,2,3,1,2,1)
fdata = factor(data)
rdata = factor(data,labels = c('I','II','III'))
rdata
data = c(1,3,2,3,1,2,1)
rdata = factor(data,labels = c('I','II','III'))
rdata
summary(rdata)
data = c(1,3,2,3,1,2,1)
rdata = factor(data,labels = c('Um','Dois','Tres'))
summary(rdata)
data = c(1,3,3,3,1,2,1)
rdata = factor(data,labels = c('Um','Dois','Tres'))
rdata
summary(rdata)
data = c(1,3,3,3,1,2,1)
rdata = factor(data,labels = c('A','E','U'))
summary(rdata)
rdata
data = c(3,1,3,3,3,1,2,1)
rdata = factor(data,labels = c('I','II','III'))
rdata
summary(rdata)
levels(fdata)
leve
levels(fdata)
levels(rdata)
rdata = factor(data,labels = c('O','T','TT'))
summary(rdata)
data = c(4,4,3,1,3,3,3,1,2,1)
rdata = factor(data,labels = c('O','T','TT','YY'))
levels(rdata)
summary(rdata)
#fator nao ordenado
set1 = c('AA','B','BA','CC','CA','AA','BA','CC','CC')
fat_set1 = factor(set1)
class(fat_set1)
is.ordered(fat_set1)
o.set1 = factor(set1,
levels=c('AA','A','BA','CA','CC'),
ordered = T)
o.set1
o.set1 = factor(set1,
levels=c('AA','A','BA','CA','CC','B'),
ordered = T)
o.set1
as.numeric(o.set1)
df = read.csv('etinias.csv',sep=',')
df = read.csv('etnias.csv',sep=',')
df
summary(df)
str(df)
levels(df$Etnia)
summary(df$Etnia)
plot(df$Idade~df$Etnia)
plot(df$Idade~df$Etnia,xlab='Etnia',ylab = 'Idade',main='Idade por Etnia')
summary(lm(Idade~Etnia,data=df))
# incluindo coluna categorizada
df
str(df)
df$Estado_Civil.cat = factor(df$Estado_Civil,levels = 'Solteiro','Casado','Divorciado')
df
df$Estado_Civil.cat = factor(df$Estado_Civil,levels = c('Solteiro','Casado','Divorciado'))
df
rdata = factor(data,labels = c('I','II','III'))
data = c(1,3,3,3,1,2,1)
rdata = factor(data,labels = c('I','II','III'))
rdata
df$Estado_Civil.cat = factor(df$Estado_Civil,levels = labels = c('Solteiro','Casado','Divorciado'))
df$Estado_Civil.cat = factor(df$Estado_Civil, labels = c('Solteiro','Casado','Divorciado'))
df
str(df)
summary(df$Estado_Civil.cat)
c(1.1:5.8)
c
myfunc = function(x){x+x}
myfunc(10)
class(myfunc())
class(myfunc)
print(valor)
myfunc2 = function (a,b){
valor = a^b
print(valor)
}
myfunc2(3,2)
myfunc2 = function (a,b){
valor = a^b
#print(valor)
}
myfunc2(3,2)
myfunc2(3,2)
myfunc2 = function (a,b){
a^b
#valor = a^b
#print(valor)
}
myfunc2(3,2)
myfunc2 = function (a,b){
valor = a^b
print(valor)
}
myfunc2(3,2)
valor = sample(1:6,6)
jogandoDados
jogandoDados = function(){
valor = sample(1:6,6)
}
jogandoDados()
jogandoDados = function(){
valor = sample(1:6,6)
valor
}
jogandoDados()
jogandoDados = function(){
valor = sample(1:6,size=1)
valor
}
jogandoDados()
jogandoDados()
jogandoDados()
vec1 = (1:5)
str(vec1)
class(vec1)
typeof(vec1)
vec2 = c('a','b','c')
vec3 = c(3.3,4.4,5.5)
myfunc3 = function(...){
df= data.frame(cbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec1,vec2)
myfunc3(vec1,vec2,vec3)
srqt(x)
sqrt(x)
###
x =  1:1000
sqrt(x)
# Usando um Loop
lista1 <- list(a = (1:10), b = (45:77))
# Usando um Loop
lista1 <- list(a = (1:10), b = (45:77))
valor_a = 0
valor_b = 0
for (i in lista1$a){
valor_a = valor_a + i
}
for (j in lista1$b){
valor_b = valor_b + j
}
print(valor_a)
print(valor_b)
for (i in lista1$a){
valor_a = valor_a + i
ptint(valor_a)
}
for (i in lista1$a){
valor_a = valor_a + i
print(valor_a)
}
for (i in lista1$a){
valor_a = valor_a + i
print(valor_a)
}
print(valor_a)
# Calculando o total de cada elemento da lista com loop for
valor_a = 0
print(valor_a)
for (i in lista1$a){
valor_a = valor_a + i
print(valor_a)
}
sapply(lista1, sum)
# Aplicando funções com sapply
sapply(lista1, mean)
# apply()
?apply
x <- matrix(rnorm(9), nr = 3, byrow = T)
x
apply(x, 1, mean)
apply(x, 2, mean)
apply(x, 1, plot)
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
escola$Geografia
# Calculando a média por aluno
escola$Media = NA
escola
escola$Media = apply(escola[, c(2, 3, 4)], 1, mean)
escola
escola$Media = round(escola$Media)
escola
# tapply() vs sqldf
install.packages('sqldf')
escola2 <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Alan', 'Alice', 'Alana'),
Semestre = c(1, 1, 1, 2, 2, 2),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola2
# Obs: Esta mensagem de warning aparece somente na primeira execução do comando sqldf():
# Warning message: Quoted identifiers should have class SQL, use DBI::SQL() if the caller performs the quoting.
sqldf("select aluno, sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by aluno")
require(sqldf)
# Obs: Esta mensagem de warning aparece somente na primeira execução do comando sqldf():
# Warning message: Quoted identifiers should have class SQL, use DBI::SQL() if the caller performs the quoting.
sqldf("select aluno, sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by aluno")
escola2
# Obs: Esta mensagem de warning aparece somente na primeira execução do comando sqldf():
# Warning message: Quoted identifiers should have class SQL, use DBI::SQL() if the caller performs the quoting.
sqldf("select aluno, sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by aluno")
tapply(c(escola2$Matematica), escola2$Aluno, sum)
# A coluna "aluno" aqui não é necessária
sqldf("select aluno, sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by semestre")
sqldf("select sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by semestre")
by(escola2[, c(2, 3, 4)], escola2$Semestre, colSums)
lista1 <- list(a = (1:10), b = (45:77))
lista1
lapply(lista1, sum)
sapply(lista1, sum)
# vapply()
?vapply
vapply(lista1, fivenum, c(Min. = 0, "1stQu." = 0, Median = 0, "3rd Qu." = 0, Max = 0))
replicate(7, runif(10))
